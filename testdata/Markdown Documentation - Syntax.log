[RenderHeader] Not handled
[Document] Not Handled
[cr()] LH=14
[Heading (1, entering)] {1  false}
-[Text] Markdown: Syntax
-[Heading (leaving)] 
-[cr()] LH=29
[HTMLBlock] <ul id="ProjectSubmenu">
    <li><a href="/projects/markdown/" title="Markdown Project Page">Main</a></li>
    <li><a href="/projects/markdown/basics" title="Markdown Basics">Basics</a></li>
    <li><a class="selected" title="Markdown Syntax Documentation">Syntax</a></li>
    <li><a href="/projects/markdown/license" title="Pricing and License Information">License</a></li>
    <li><a href="/projects/markdown/dingus" title="Online Markdown Web Form">Dingus</a></li>
</ul>
[cr()] LH=14
[cr()] LH=14
[Unordered List (entering)] {16 true 0 0 [] false}
[... List Left Margin] set to 58.338
-[Unordered Item (entering) #1] {16 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] 
---[Link (entering)] Destination[#overview] Title[]
---[Text] Overview
---[Link (leaving)] 
--[Text] 
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered List (entering)] {16 true 0 0 [] false}
--[... List Left Margin] set to 88.326
---[Unordered Item (entering) #1] {16 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#philosophy] Title[]
-----[Text] Philosophy
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {16 false 42 46 [] false}
---[Unordered Item (entering) #2] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#html] Title[]
-----[Text] Inline HTML
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #3] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#autoescape] Title[]
-----[Text] Automatic Escaping for Special Characters
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered List (leaving)] {16 true 0 0 [] false}
---[... Reset List Left Margin] re-set to 58.337999999999994
--[Unordered Item (leaving)] {16 false 42 46 [] false}
-[Unordered Item (entering) #2] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] 
---[Link (entering)] Destination[#block] Title[]
---[Text] Block Elements
---[Link (leaving)] 
--[Text] 
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered List (entering)] {16 true 0 0 [] false}
--[... List Left Margin] set to 88.326
---[Unordered Item (entering) #1] {16 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#p] Title[]
-----[Text] Paragraphs and Line Breaks
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {16 false 42 46 [] false}
---[Unordered Item (entering) #2] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#header] Title[]
-----[Text] Headers
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #3] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#blockquote] Title[]
-----[Text] Blockquotes
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #4] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#list] Title[]
-----[Text] Lists
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #5] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#precode] Title[]
-----[Text] Code Blocks
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #6] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#hr] Title[]
-----[Text] Horizontal Rules
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered List (leaving)] {16 true 0 0 [] false}
---[... Reset List Left Margin] re-set to 58.337999999999994
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #3] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] 
---[Link (entering)] Destination[#span] Title[]
---[Text] Span Elements
---[Link (leaving)] 
--[Text] 
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered List (entering)] {16 true 0 0 [] false}
--[... List Left Margin] set to 88.326
---[Unordered Item (entering) #1] {16 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#link] Title[]
-----[Text] Links
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {16 false 42 46 [] false}
---[Unordered Item (entering) #2] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#em] Title[]
-----[Text] Emphasis
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #3] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#code] Title[]
-----[Text] Code
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered Item (entering) #4] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#img] Title[]
-----[Text] Images
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered List (leaving)] {16 true 0 0 [] false}
---[... Reset List Left Margin] re-set to 58.337999999999994
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #4] {32 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] 
---[Link (entering)] Destination[#misc] Title[]
---[Text] Miscellaneous
---[Link (leaving)] 
--[Text] 
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered List (entering)] {16 true 0 0 [] false}
--[... List Left Margin] set to 88.326
---[Unordered Item (entering) #1] {16 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#backslash] Title[]
-----[Text] Backslash Escapes
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {16 false 42 46 [] false}
---[Unordered Item (entering) #2] {0 false 42 46 [] false}
---[cr()] LH=14
----[Paragraph (entering)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[First Para within a list] breaking
----[Text] 
-----[Link (entering)] Destination[#autolink] Title[]
-----[Text] Automatic Links
-----[Link (leaving)] 
----[Text] 
----[Paragraph (leaving)] 
----[... Margins (left, top, right, bottom:] 128.31 28.35 28.35 56.7
----[Unordered Item (leaving)] {0 false 42 46 [] false}
---[Unordered List (leaving)] {16 true 0 0 [] false}
---[... Reset List Left Margin] re-set to 58.337999999999994
--[Unordered Item (leaving)] {32 false 42 46 [] false}
-[Unordered List (leaving)] {16 true 0 0 [] false}
-[... Reset List Left Margin] re-set to 28.35
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] 
[Strong (entering)] 
[Text] Note:
[Strong (leaving)] 
[Text]  This document is itself written using Markdown; you can 
-[Link (entering)] Destination[/projects/markdown/syntax.text] Title[]
-[Text] see the source for it by adding '.text' to the URL
-[Link (leaving)] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HorizontalRule] 
[cr()] LH=14
[... From X,Y] 28.35,447.35
[...   To X,Y] 583.65,447.35
[cr()] LH=14
[HTMLBlock] <h2 id="overview">Overview</h2>
[cr()] LH=14
[cr()] LH=14
[HTMLBlock] <h3 id="philosophy">Philosophy</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown is intended to be as easy-to-read and easy-to-write as is feasible.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. While Markdown's syntax has been influenced by several existing text-to-HTML filters -- including 
-[Link (entering)] Destination[http://docutils.sourceforge.net/mirror/setext.html] Title[]
-[Text] Setext
-[Link (leaving)] 
[Text] , 
-[Link (entering)] Destination[http://www.aaronsw.com/2002/atx/] Title[]
-[Text] atx
-[Link (leaving)] 
[Text] , 
-[Link (entering)] Destination[http://textism.com/tools/textile/] Title[]
-[Text] Textile
-[Link (leaving)] 
[Text] , 
-[Link (entering)] Destination[http://docutils.sourceforge.net/rst.html] Title[]
-[Text] reStructuredText
-[Link (leaving)] 
[Text] , 
-[Link (entering)] Destination[http://www.triptico.com/software/grutatxt.html] Title[]
-[Text] Grutatext
-[Link (leaving)] 
[Text] , and 
-[Link (entering)] Destination[http://ettext.taint.org/doc/] Title[]
-[Text] EtText
-[Link (leaving)] 
[Text]  -- the single biggest source of inspiration for Markdown's syntax is the format of plain text email.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To this end, Markdown's syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like 
[Text] *
[Text] emphasis
[Text] *
[Text] . Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you've ever used email.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="html">Inline HTML</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown's syntax is intended for one purpose: to be used as a format for 
[Emph (entering)] 
[Text] writing
[Emph (leaving)] 
[Text]  for the web.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is 
[Emph (entering)] 
[Text] not
[Emph (leaving)] 
[Text]  to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert. The idea for Markdown is to make it easy to read, write, and edit prose. HTML is a 
[Emph (entering)] 
[Text] publishing
[Emph (leaving)] 
[Text]  format; Markdown is a 
[Emph (entering)] 
[Text] writing
[Emph (leaving)] 
[Text]  format. Thus, Markdown's formatting syntax only addresses issues that can be conveyed in plain text.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] For any markup that is not covered by Markdown's syntax, you simply use HTML itself. There's no need to preface it or delimit it to indicate that you're switching from Markdown to HTML; you just use the tags.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The only restrictions are that block-level HTML elements -- e.g. 
[Code] 
[Text] , 
[Code] 
[Text] , 
[Code] 
[Text] , 
[Code] 
[Text] , etc. -- must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented with tabs or spaces. Markdown is smart enough not to add extra (unwanted) 
[Code] 
[Text]  tags around HTML block-level tags.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] For example, to add an HTML table to a Markdown article:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can't use Markdown-style 
[Code] 
[Text]  inside an HTML block.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Span-level HTML tags -- e.g. 
[Code] 
[Text] , 
[Code] 
[Text] , or 
[Code] 
[Text]  -- can be used anywhere in a Markdown paragraph, list item, or header. If you want, you can even use HTML tags instead of Markdown formatting; e.g. if you'd prefer to use HTML 
[Code] 
[Text]  or 
[Code] 
[Text]  tags instead of Markdown's link or image syntax, go right ahead.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Unlike block-level HTML tags, Markdown syntax 
[Emph (entering)] 
[Text] is
[Emph (leaving)] 
[Text]  processed within span-level tags.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="autoescape">Automatic Escaping for Special Characters</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] In HTML, there are two characters that demand special treatment: 
[Code] 
[Text]  and 
[Code] 
[Text] . Left angle brackets are used to start tags; ampersands are used to denote HTML entities. If you want to use them as literal characters, you must escape them as entities, e.g. 
[Code] 
[Text] , and 
[Code] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Ampersands in particular are bedeviling for web writers. If you want to write about 'AT&T', you need to write '
[Code] 
[Text] '. You even need to escape ampersands within URLs. Thus, if you want to link to:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] you need to encode the URL as:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] in your anchor tag 
[Code] 
[Text]  attribute. Needless to say, this is easy to forget, and is probably the single most common source of HTML validation errors in otherwise well-marked-up web sites.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown allows you to use these characters naturally, taking care of all the necessary escaping for you. If you use an ampersand as part of an HTML entity, it remains unchanged; otherwise it will be translated into 
[Code] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] So, if you want to include a copyright symbol in your article, you can write:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] and Markdown will leave it alone. But if you write:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown will translate it to:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Similarly, because Markdown supports 
-[Link (entering)] Destination[#html] Title[]
-[Text] inline HTML
-[Link (leaving)] 
[Text] , if you use angle brackets as delimiters for HTML tags, Markdown will treat them as such. But if you write:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown will translate it to:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] However, inside Markdown code spans and blocks, angle brackets and ampersands are 
[Emph (entering)] 
[Text] always
[Emph (leaving)] 
[Text]  encoded automatically. This makes it easy to use Markdown to write about HTML code. (As opposed to raw HTML, which is a terrible format for writing about HTML syntax, because every single 
[Code] 
[Text]  and 
[Code] 
[Text]  in your example code needs to be escaped.)
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HorizontalRule] 
[cr()] LH=14
[... From X,Y] 28.35,602.35
[...   To X,Y] 583.65,602.35
[cr()] LH=14
[HTMLBlock] <h2 id="block">Block Elements</h2>
[cr()] LH=14
[cr()] LH=14
[HTMLBlock] <h3 id="p">Paragraphs and Line Breaks</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be intended with spaces or tabs.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The implication of the "one or more consecutive lines of text" rule is that Markdown supports "hard-wrapped" text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type's "Convert Line Breaks" option) which translate every line break character in a paragraph into a 
[Code] 
[Text]  tag.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] When you 
[Emph (entering)] 
[Text] do
[Emph (leaving)] 
[Text]  want to insert a 
[Code] 
[Text]  break tag using Markdown, you end a line with two or more spaces, then type return.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Yes, this takes a tad more effort to create a 
[Code] 
[Text] , but a simplistic "every line break is a 
[Code] 
[Text] " rule wouldn't work for Markdown. Markdown's email-style 
-[Link (entering)] Destination[#blockquote] Title[]
-[Text] blockquoting
-[Link (leaving)] 
[Text]  and multi-paragraph 
-[Link (entering)] Destination[#list] Title[]
-[Text] list items
-[Link (leaving)] 
[Text]  work best -- and look better -- when you format them with hard breaks.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="header">Headers</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown supports two styles of headers, 
-[Link (entering)] Destination[http://docutils.sourceforge.net/mirror/setext.html] Title[]
-[Text] Setext
-[Link (leaving)] 
[Text]  and 
-[Link (entering)] Destination[http://www.aaronsw.com/2002/atx/] Title[]
-[Text] atx
-[Link (leaving)] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Setext-style headers are "underlined" using equal signs (for first-level headers) and dashes (for second-level headers). For example:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Any number of underlining 
[Code] 
[Text] 's or 
[Code] 
[Text] 's will work.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Atx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Optionally, you may "close" atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don't even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[HTMLBlock] <h3 id="blockquote">Blockquotes</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown uses email-style 
[Code] 
[Text]  characters for blockquoting. If you're familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a 
[Code] 
[Text]  before every line:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown allows you to be lazy and only put the 
[Code] 
[Text]  before the first line of a hard-wrapped paragraph:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of 
[Code] 
[Text] :
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="list">Lists</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown supports ordered (numbered) and unordered (bulleted) lists.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] is equivalent to:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] and:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Ordered lists use numbers followed by periods:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] It's important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] If you instead wrote the list in Markdown like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] or even:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] you'd get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don't have to.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] If you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] List markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To make lists look nice, you can wrap items with hanging indents:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] But if you want to be lazy, you don't have to:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] If list items are separated by blank lines, Markdown will wrap the items in 
[Code] 
[Text]  tags in the HTML output. For example, this input:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will turn into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] But this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will turn into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be intended by either 4 spaces or one tab:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To put a blockquote within a list item, the blockquote's 
[Code] 
[Text]  delimiters need to be indented:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To put a code block within a list item, the code block needs to be indented 
[Emph (entering)] 
[Text] twice
[Emph (leaving)] 
[Text]  -- 8 spaces or two tabs:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] It's worth noting that it's possible to trigger an ordered list by accident, by writing something like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] In other words, a 
[Emph (entering)] 
[Text] number-period-space
[Emph (leaving)] 
[Text]  sequence at the beginning of a line. To avoid this, you can backslash-escape the period:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[HTMLBlock] <h3 id="precode">Code Blocks</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both 
[Code] 
[Text]  and 
[Code] 
[Text]  tags.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown will generate:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] One level of indentation -- 4 spaces or 1 tab -- is removed from each line of the code block. For example, this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will turn into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] A code block continues until it reaches a line that is not indented (or the end of the article).
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Within a code block, ampersands (
[Code] 
[Text] ) and angle brackets (
[Code] 
[Text]  and 
[Code] 
[Text] ) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will turn into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it's also easy to use Markdown to write about Markdown's own syntax.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="hr">Horizontal Rules</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] You can produce a horizontal rule tag (
[Code] 
[Text] ) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[HorizontalRule] 
[cr()] LH=14
[... From X,Y] 28.35,348.35
[...   To X,Y] 583.65,348.35
[cr()] LH=14
[HTMLBlock] <h2 id="span">Span Elements</h2>
[cr()] LH=14
[cr()] LH=14
[HTMLBlock] <h3 id="link">Links</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown supports two style of links: 
[Emph (entering)] 
[Text] inline
[Emph (leaving)] 
[Text]  and 
[Emph (entering)] 
[Text] reference
[Emph (leaving)] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] In both styles, the link text is delimited by [square brackets].
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To create an inline link, use a set of regular parentheses immediately after the link text's closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an 
[Emph (entering)] 
[Text] optional
[Emph (leaving)] 
[Text]  title for the link, surrounded in quotes. For example:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Will produce:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] If you're referring to a local resource on the same server, you can use relative paths:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] You can optionally use a space to separate the sets of brackets:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Then, anywhere in the document, you define your link label like this, on a line by itself:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] That is:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Unordered List (entering)] {16 true 0 0 [] false}
[... List Left Margin] set to 58.338
-[Unordered Item (entering) #1] {16 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] Square brackets containing the link identifier (optionally indented from the left margin using up to three spaces);
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {16 false 42 46 [] false}
-[Unordered Item (entering) #2] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] followed by a colon;
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #3] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] followed by one or more spaces (or tabs);
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #4] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] followed by the URL for the link;
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #5] {32 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] optionally followed by a title attribute for the link, enclosed in double or single quotes.
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {32 false 42 46 [] false}
-[Unordered List (leaving)] {16 true 0 0 [] false}
-[... Reset List Left Margin] re-set to 28.35
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The link URL may, optionally, be surrounded by angle brackets:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] You can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Link definitions are only used for creating links during Markdown processing, and are stripped from your document in the HTML output.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are 
[Emph (entering)] 
[Text] not
[Emph (leaving)] 
[Text]  case sensitive. E.g. these two links:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] are equivalent.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The 
[Emph (entering)] 
[Text] implicit link name
[Emph (leaving)] 
[Text]  shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets -- e.g., to link the word "Google" to the google.com web site, you could simply write:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] And then define the link:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Because link names may contain spaces, this shortcut even works for multiple words in the link text:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] And then define the link:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Link definitions can be placed anywhere in your Markdown document. I tend to put them immediately after each paragraph in which they're used, but if you want, you can put them all at the end of your document, sort of like footnotes.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Here's an example of reference links in action:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Using the implicit link name shortcut, you could instead write:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Both of the above examples will produce the following HTML output:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] For comparison, here is the same paragraph written using Markdown's inline link style:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The point of reference-style links is not that they're easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it's 176 characters; and as raw HTML, it's 234 characters. In the raw HTML, there's more markup than there is text.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] With Markdown's reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="em">Emphasis</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown treats asterisks (
[Code] 
[Text] ) and underscores (
[Code] 
[Text] ) as indicators of emphasis. Text wrapped with one 
[Code] 
[Text]  or 
[Code] 
[Text]  will be wrapped with an HTML 
[Code] 
[Text]  tag; double 
[Code] 
[Text] 's or 
[Code] 
[Text] 's will be wrapped with an HTML 
[Code] 
[Text]  tag. E.g., this input:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will produce:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] You can use whichever style you prefer; the lone restriction is that the same character must be used to open and close an emphasis span.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Emphasis can be used in the middle of a word:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] But if you surround an 
[Code] 
[Text]  or 
[Code] 
[Text]  with spaces, it'll be treated as a literal asterisk or underscore.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[HTMLBlock] <h3 id="code">Code</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To indicate a span of code, wrap it with backtick quotes (
[Code] 
[Text] ). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will produce:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] To include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] which will produce this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] The backtick delimiters surrounding a code span may include spaces -- one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] will produce:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] With a code span, ampersands and angle brackets are encoded as HTML entities automatically, which makes it easy to include example HTML tags. Markdown will turn this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] You can write this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] to produce:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[HTMLBlock] <h3 id="img">Images</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Admittedly, it's fairly difficult to devise a "natural" syntax for placing images into a plain text document format.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: 
[Emph (entering)] 
[Text] inline
[Emph (leaving)] 
[Text]  and 
[Emph (entering)] 
[Text] reference
[Emph (leaving)] 
[Text] .
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Inline image syntax looks like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] That is:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Unordered List (entering)] {16 true 0 0 [] false}
[... List Left Margin] set to 58.338
-[Unordered Item (entering) #1] {16 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] An exclamation mark: 
--[Code] 
--[Text] ;
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {16 false 42 46 [] false}
-[Unordered Item (entering) #2] {0 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] followed by a set of square brackets, containing the 
--[Code] 
--[Text]  attribute text for the image;
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {0 false 42 46 [] false}
-[Unordered Item (entering) #3] {32 false 42 46 [] false}
-[cr()] LH=14
--[Paragraph (entering)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[First Para within a list] breaking
--[Text] followed by a set of parentheses, containing the URL or path to the image, and an optional 
--[Code] 
--[Text]  attribute enclosed in double or single quotes.
--[Paragraph (leaving)] 
--[... Margins (left, top, right, bottom:] 98.322 28.35 28.35 56.7
--[Unordered Item (leaving)] {32 false 42 46 [] false}
-[Unordered List (leaving)] {16 true 0 0 [] false}
-[... Reset List Left Margin] re-set to 28.35
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Reference-style image syntax looks like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Where "id" is the name of a defined image reference. Image references are defined using syntax identical to link references:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] As of this writing, Markdown has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML 
[Code] 
[Text]  tags.
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HorizontalRule] 
[cr()] LH=14
[... From X,Y] 28.35,544.35
[...   To X,Y] 583.65,544.35
[cr()] LH=14
[HTMLBlock] <h2 id="misc">Miscellaneous</h2>
[cr()] LH=14
[cr()] LH=14
[HTMLBlock] <h3 id="autolink">Automatic Links</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown supports a shortcut style for creating "automatic" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown will turn this into:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Automatic links for email addresses work similarly, except that Markdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots. For example, Markdown will turn this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] into something like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] which will render in a browser as a clickable link to "address@example.com".
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] (This sort of entity-encoding trick will indeed fool many, if not most, address-harvesting bots, but it definitely won't fool all of them. It's better than nothing, but an address published in this way will probably eventually start receiving spam.)
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[HTMLBlock] <h3 id="backslash">Backslash Escapes</h3>
[cr()] LH=14
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown's formatting syntax. For example, if you wanted to surround a word with literal asterisks (instead of an HTML 
[Code] 
[Text]  tag), you can backslashes before the asterisks, like this:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Paragraph (entering)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Text] Markdown provides backslash escapes for the following characters:
[Paragraph (leaving)] 
[... Margins (left, top, right, bottom:] 28.35 28.35 28.35 56.7
[cr()] LH=14
[Codeblock] {false [] 0 0 0}
[cr()] LH=14
[Document] Not Handled
[RenderFooter] Not handled
